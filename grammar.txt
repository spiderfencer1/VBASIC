program = function-declaration { function-declaration } ;
block = statement { statement } ;
function-declaration =
	"Function" IDENTIFIER "(" [ argument { "," argument } ] ")" NEWLINE
		block
	"End" "Function" NEWLINE
;
argument = IDENTIFIER "As" type ;
type = "Integer" ;
statement = assignment-statement | return-statement | declaration-statement | if-statement | while-statement | print-statement | input-statement ;
assignment-statement = "Let" IDENTIFIER "=" expression NEWLINE ;
return-statement = "Return" expression NEWLINE ;
declaration-statement = "Dim" IDENTIFIER "As" type NEWLINE ;
if-statement =
	"If" expression "Then" NEWLINE
		block
	[ "Else" NEWLINE
		block ]
	"End" "If" NEWLINE
;
while-statement =
	"Do" "While" expression NEWLINE
		block
	"Loop" NEWLINE
;
print-statement = "Print" expression NEWLINE ;
input-statement = "Input" IDENTIFIER NEWLINE ;
expression = comparand-expression { ( "=" | "<>" | "<" | "<=" | ">=" ">" ) comparand-expression } ;
comparand-expression = term-expression { ( "*" | "/" ) term-expression } ;
term-expression = factor-expression { ( "+" | "/" ) factor-expression } ;
factor-expression = parenthesis-expression | negation-expression | variable-reference-or-function-call-expression | constant-expression ;
parenthesis-expression = "(" expression ")" ;
negation-expression = "-" expression ;
constant-expression = INTEGER ;
variable-reference-or-function-call-expression = IDENTIFIER [ "(" [ expression { "," expression } ] ;
